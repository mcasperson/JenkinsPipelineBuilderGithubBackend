name: Java CI

on:
  push:
  workflow_dispatch:

jobs:
  build:

    env:
      APP_GITHUB_SECRET: ${{ secrets.APP_GITHUB_SECRET }}
      APP_GITHUB_ID: ${{ secrets.APP_GITHUB_SECRET }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - uses: nelonoel/branch-name@v1.0.1

      - name: Install Octopus CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1.1.1
        with:
          version: latest

      - name: Set up JDK 1.11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - uses: DeLaGuardo/setup-graalvm@4.0
        with:
          graalvm: '21.2.0'
          java: 'java11'
          arch: 'amd64'

      - name: Install native-image component
        run: gu install native-image

      - name: Install Octopus Deploy CLI
        uses: OctopusDeploy/install-octocli@v1
        with:
          version: 7.4.3124

      - name: Checkstyle
        run: mvn --batch-mode checkstyle:check

      - name: Install modules
        run: mvn --batch-mode install

      - name: Update version
        run: cd jenkins-pipeline-builder-github-backend; mvn --batch-mode build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}.${{ github.run_number }}

      - name: List dependencies
        run: mvn --batch-mode dependency:tree --no-transfer-progress

      - name: Build with Maven
        run: mvn --batch-mode package --file pom.xml -Pnative -DskipTests

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 0.1.${{ github.run_number }}
          release_name: Release 0.1.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: jenkins-pipeline-builder-github-backend/target/jenkins-pipeline-builder-github-backend-runner
          asset_name: jenkins-pipeline-builder-github-backend-runner
          asset_content_type: application/octet-stream

      #      - name: Create zip
      #        run: zip jenkins-pipeline-builder-github-backend-runner.0.1.0.${{ github.run_number }}.zip jenkins-pipeline-builder-github-backend/target/jenkins-pipeline-builder-github-backend-runner
      #
      #      - name: Push Package
      #        run: octo push --package jenkins-pipeline-builder-github-backend-runner.0.1.0.${{ github.run_number }}.zip --server=${{ secrets.OCTOPUS_SERVER }} --apiKey=${{ secrets.OCTOPUS_APIKEY }} --space "Content Team"

      - name: Rename zip
        run: >
          mv jenkins-pipeline-builder-github-backend/target/function.zip
          jenkins-pipeline-builder-github-backend-lambda.0.1.0.${{ github.run_number }}.zip

      - name: Push Package
        run: >
          octo push --package jenkins-pipeline-builder-github-backend-lambda.0.1.0.${{ github.run_number }}.zip
          --server ${{ secrets.OCTOPUS_SERVER }}
          --apiKey ${{ secrets.OCTOPUS_APIKEY }}
          --space "Content Team"

      - name: Generate SBOM
        run: mvn cyclonedx:makeAggregateBom -DskipTests

      - name: Build SBOM package
        run: >
          octo pack
          --id jenkins-pipeline-builder-github-backend-lambda-sbom
          --version 0.1.0.${{ github.run_number }}
          --format zip
          --include **/bom.xml

      - name: Push SBOM Package
        run: >
          octo push --package jenkins-pipeline-builder-github-backend-lambda-sbom.0.1.0.${{ github.run_number }}.zip
          --server ${{ secrets.OCTOPUS_SERVER }}
          --apiKey ${{ secrets.OCTOPUS_APIKEY }}
          --space "Content Team"

      - name: Trigger deployment
        run: >
          octo create-release
          --project "Jenkins Pipeline Generator"
          --deployTo "Development"
          --server ${{ secrets.OCTOPUS_SERVER }}
          --apiKey ${{ secrets.OCTOPUS_APIKEY }}
          --space "Content Team"

      # https://github.com.cnpmjs.org/AppThreat/dep-scan
      - name: Generate vulnerability report
        run: find . -type f -name 'bom.xml' -exec docker run --rm -v "$PWD:/app" appthreat/dep-scan scan --bom /app/{} --type bom \; exit 0